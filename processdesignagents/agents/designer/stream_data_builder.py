from __future__ import annotations

from langchain_core.prompts import (
    ChatPromptTemplate,
    HumanMessagePromptTemplate,
    MessagesPlaceholder,
    SystemMessagePromptTemplate,
)
from dotenv import load_dotenv

from processdesignagents.agents.utils.agent_states import DesignState
from processdesignagents.agents.utils.prompt_utils import jinja_raw

load_dotenv()


def create_stream_data_builder(llm):
    def stream_data_builder(state: DesignState) -> DesignState:
        """Stream Data Builder: Produces a transposed markdown table template for process streams."""
        print("\n# Stream Data Template", flush=True)
        
        llm.temperature = 0.7

        basic_pfd_markdown = state.get("basic_pfd", "")
        design_basis_markdown = state.get("design_basis", "")
        requirements_markdown = state.get("requirements", "")
        concept_details_markdown = state.get("selected_concept_details", "")

        base_prompt = stream_data_prompt(
            basic_pfd_markdown,
            design_basis_markdown,
            requirements_markdown,
            concept_details_markdown,
        )
        prompt_messages = base_prompt.messages + [MessagesPlaceholder(variable_name="messages")]
        prompt = ChatPromptTemplate.from_messages(prompt_messages)

        response = (prompt | llm).invoke({"messages": list(state.get("messages", []))})
        table_markdown = (
            response.content if isinstance(response.content, str) else str(response.content)
        ).strip()

        print(table_markdown, flush=True)

        return {
            "basic_stream_data": table_markdown,
            "messages": [response],
        }

    return stream_data_builder


def stream_data_prompt(
    basic_pfd_markdown: str,
    design_basis_markdown: str,
    requirements_markdown: str,
    concept_details_markdown: str,
) -> ChatPromptTemplate:
    system_content = f"""
# CONTEXT
You inherit the approved concept narrative, requirements summary, and design basis generated by upstream design agents. The project is transitioning from conceptual definition to simulation prep, and downstream teams need a canonical list of streams to drive subsequent estimates.

# TARGET AUDIENCE
- Stream data estimator responsible for populating operating conditions.
- Equipment list builder aligning equipment connectivity ahead of sizing.
- Project reviewers verifying that every flow path in the concept is represented.

# ROLE
You are a process engineer compiling preliminary stream definitions for a chemical process. Create a clear MARKDOWN TABLE that captures every stream referenced in the available design information.

# TASK
For each stream, provide identifiers, origin/destination, qualitative description, and placeholder operating data that will later be filled by the simulator.

# INSTRUCTIONS
1. Review the BASIC PFD description, design basis, requirements, and concept details to extract every stream mentioned or implied.
2. Preserve existing stream identifiers; when an ID is missing, assign a new sequential number (1001, 1002, ...) that follows plant conventions.
3. For each stream column, complete all attribute rows—use descriptive text where known and `<value>` placeholders (include units, e.g., `<8500 kg/h>`) for numeric data that will be estimated later.
4. Add extra attribute or component rows if the process description requires them, keeping the table transposed with attributes as rows.
5. Include every process, utility, recycle, bypass, and vent stream so downstream agents receive a comprehensive inventory.

# MARKDOWN TEMPLATE:
```
| Attribute | 1001 | 1002 | ... |
| Name / Description | Feed from T-101 | <value> | ... |
| From | T-101 | <value> | ... |
| To | E-101 | <value> | ... |
| Phase | <value> | <value> | ... |
| Mass Flow [kg/h] | <value> | <value> | ... |
| Temperature [°C] | <value> | <value> | ... |
| Pressure [barg] | <value> | <value> | ... |
| Key Component | (mol %) | (mol %) | ... |
| Component A | ... | ... | ... | ... |
| Component B | ... | ... | ... | ... |
| Component C | ... | ... | ... | ... |
```

- Use `<value>` placeholders where numbers are unknown.
- Add additional stream columns for every stream implied by the concept (utilities, recycle, vent, product, etc.).

# CRITICALS
- **MUST** return the full stream data table in markdown format.
- **Output ONLY a valid markdown formatting text. Do not use code block.**
---
# EXAMPLE INPUT:
In a heat exchanger that cools ethanol from 80 C to 40 C with cooling water, create streams for hot ethanol feed, cooled ethanol product, cooling water supply, and cooling water return, assigning IDs and placeholder temperatures that reflect the duty.

# EXPECTED MARKDOWN OUTPUT:
```
| Attribute | 1001 | 1002 | 2001 | 2002 |
| Name / Description | Hot ethanol feed | Cooled ethanol product | Cooling water supply | Cooling water return |
| From | Upstream blender | E-101 outlet | CW header | E-101 |
| To | E-101 shell | Storage tank via P-101 | E-101 tubes | CW header |
| Phase | Liquid | Liquid | Liquid | Liquid |
| Mass Flow [kg/h] | <10,000> | <10,000> | <24,000> | <24,000> |
| Temperature [degC] | <80> | <40> | <25> | <35> |
| Pressure [barg] | <1.5> | <1.3> | <2.5> | <2.3> |
| Key Components | mol% | mol% | mol% | mol% |
| Ethanol (C2H6O) | <95> | <95> | <0> | <0> |
| Water (H2O) | <5> | <5> | <100> | <100> |
| Notes | Tie-in from upstream blender | To fixed-roof storage | Shared cooling water header | Returned to utility system |
```
"""

    human_content = f"""
# DATA FOR ANALYSIS
---
**Basic PFD Description (Markdown):**
{basic_pfd_markdown}

**Design Basis (Markdown):**
{design_basis_markdown}

**Requirements Summary (Markdown):**
{requirements_markdown}

**Concept Details (Markdown):**
{concept_details_markdown}

"""

    messages = [
        SystemMessagePromptTemplate.from_template(
            jinja_raw(system_content),
            template_format="jinja2",
        ),
        HumanMessagePromptTemplate.from_template(
            jinja_raw(human_content),
            template_format="jinja2",
        ),
    ]

    return ChatPromptTemplate.from_messages(messages)
